package window

import (
	"log"
	"netwrk/libs"
	"strings"
	"time"

	tui "github.com/marcusolsson/tui-go"
	wordwrap "github.com/mitchellh/go-wordwrap"
)

// global vars

// Sidebar for general purpose
var Sidebar = tui.NewVBox()

// History for appending the messages...
var History = tui.NewVBox()

// Input global input box
var Input = tui.NewEntry()

// end of vars

// CreateMainWindow creates main windows
func CreateMainWindow() {

	vBox := tui.NewVBox()
	vBox.SetSizePolicy(tui.Minimum, tui.Minimum)
	Sidebar := tui.NewVBox()
	Sidebar.SetSizePolicy(tui.Minimum, tui.Minimum)

	for _, cmd := range strings.Split(libs.Cmds, ",") {
		Sidebar.Append(tui.NewLabel(wordwrap.WrapString(cmd, 50)))
	}

	Sidebar.SetBorder(true)
	Sidebar.Prepend(tui.NewLabel("***COMMANDS***"))

	Input.SetFocused(true)
	Input.SetSizePolicy(tui.Expanding, tui.Maximum)

	inputBox := tui.NewHBox(Input)
	inputBox.SetBorder(true)
	inputBox.SetSizePolicy(tui.Expanding, tui.Maximum)

	historyScroll := tui.NewScrollArea(History)
	historyScroll.SetAutoscrollToBottom(true)
	historyBox := tui.NewVBox(historyScroll)
	historyBox.SetBorder(true)

	chat := tui.NewVBox(historyBox, inputBox)
	chat.SetSizePolicy(tui.Expanding, tui.Expanding)

	// create root window and add all windows
	root := tui.NewHBox(Sidebar, chat)
	ui, err := tui.New(root)
	if err != nil {
		log.Fatal(err)
	}
	ui.SetKeybinding("Esc", func() { ui.Quit() })

	Input.OnSubmit(func(e *tui.Entry) {
		// this is just to see what command given
		userCommand := e.Text()
		if userCommand == "" {
			History.Append(tui.NewLabel("that is not acceptable command"))
			History.Append(tui.NewLabel(libs.PrintHelp()))
		} else {
			History.Append(tui.NewHBox(
				tui.NewLabel("Your Command: " + userCommand),
			))
			History.Append(tui.NewHBox(tui.NewLabel("")))

			if strings.HasPrefix(userCommand, "\\") {
				// then this is command ..
				switch userCommand {
				case "\\help":
					History.Append(tui.NewLabel(libs.PrintHelp()))
				case "\\monitor":
					History.Append(tui.NewLabel("Switching to MONITOR mode for device " + DeviceName))
					ChangeToMonitorMode()
				case "\\managed":
					History.Append(tui.NewLabel("Switching to MANAGED mode for device " + DeviceName))
					ChangeToManagedMode()
				case "\\exit":
					History.Append(tui.NewHBox(tui.NewLabel("quitting...")))
					time.Sleep(1000 * time.Millisecond)
					// os.Exit(0)

				}
			} else if strings.Contains(userCommand, ":") {
				// then this is declaration
				cmdSplit := strings.Split(userCommand, ":")
				if cmdSplit[1] == "" {
					History.Append(tui.NewLabel("that is not acceptable command"))
					History.Append(tui.NewLabel(libs.PrintHelp()))
				} else {
					switch cmdSplit[0] {
					case "device":
						SetDeviceName(cmdSplit[1])
					default:
						History.Append(tui.NewLabel("there is no such declaration or command"))
					}
				}

			} else {
				History.Append(tui.NewHBox(tui.NewLabel(userCommand + " is not command or a declaration")))
			}
		}
		Input.SetText("")
	})

	if err := ui.Run(); err != nil {
		log.Fatal(err)
	}
}
