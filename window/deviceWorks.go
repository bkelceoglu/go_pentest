package window

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/marcusolsson/tui-go"
)

var filepath = "/sys/class/net/"
var givenDevice = "wlan0"

// DeviceName for exporting the devicename
var DeviceName string

// AllDevices represents devices
var AllDevices map[string]string

// SetDeviceName sets the device name to DeviceName
func SetDeviceName(devName string) {
	// check if device name is in the list
	DeviceName = devName
	History.Append(tui.NewLabel("ok... device name set as: " + DeviceName))
}

// StartMonitoring start jobs here...
func StartMonitoring(deviceName string) {
	ChangeToMonitorMode()
}

// StopMonitoring changes to managed mode
func StopMonitoring(deviceName string) {
	ChangeToManagedMode()
}

// StartListening starts listening and outputs the results.
func StartListening() {
	parameter := "-eni" + " " + DeviceName
	shellCmd := "tcpdump"
	cmd := exec.Command(shellCmd, strings.Split(parameter, " ")...)
	stdOut, _ := cmd.StdoutPipe()
	cmd.Start()
	scanner := bufio.NewScanner(stdOut)

	// loopCracker:
	for scanner.Scan() {
		out := scanner.Text()
		fmt.Println(out)
		History.Append(tui.NewHBox(tui.NewLabel(out)))
	}

}

// ListenSpecificBSSID listens given bssid
func ListenSpecificBSSID(bssid string) {
	// tcpdump -i eth0 ether host aa:bb:cc:11:22:33
	parameter := " -i" + " " + DeviceName + " " + "ether" + " " + "host" + " " + bssid
	// change channel before listening...
	shellCmd := "tcpdump"
	cmd := exec.Command(shellCmd, strings.Split(parameter, " ")...)
	stdout, _ := cmd.StdoutPipe()
	cmd.Start()
	scanner := bufio.NewScanner(stdout)
	for scanner.Scan() {
		line := scanner.Text()
		fmt.Println("\r>> " + line)
	}
	// cmd.Wait()
}

//ChangeMac address for given device
func ChangeMac() {

}

// ChangePromiscuousMode for given device
func ChangePromiscuousMode() {

}

// ChangeToManagedMode changes to managed mode
func ChangeToManagedMode() {
	setDeviceDownorUp(DeviceName, "down")
	if err := exec.Command("iwconfig", DeviceName, "mode", "managed").Run(); err != nil {
		// PrintError(errors.New(err.Error() + " can not make device managed"))
	}
	setDeviceDownorUp(DeviceName, "up")
	History.Append(tui.NewHBox(tui.NewLabel("")))
	History.Append(tui.NewHBox(tui.NewLabel(DeviceName + " is switched to MANAGED mode")))
}

// ChangeToMonitorMode changes to monitor mode
func ChangeToMonitorMode() {
	setDeviceDownorUp(DeviceName, "down")
	if err := exec.Command("iwconfig", DeviceName, "mode", "monitor").Run(); err != nil {
		// PrintError(errors.New(err.Error() + " can not make device monitor"))
	}
	setDeviceDownorUp(DeviceName, "up")
	History.Append(tui.NewHBox(tui.NewLabel("")))
	History.Append(tui.NewHBox(tui.NewLabel(DeviceName + " is switched to MONITOR mode")))

}

func setDeviceDownorUp(deviceName, state string) {
	cmd := exec.Command("ip", "link", "set", deviceName, state)
	err := cmd.Run()
	if err != nil {
		// PrintError(errors.New(err.Error() + " can not run command"))
	}
}

func changeFilePermission777() {
	filepath += filepath + givenDevice
	if err := os.Chmod(filepath, 0777); err != nil {
		// PrintError(errors.New(err.Error() + " <> can not set 0777 for " + givenDevice))
	}
}

func changeFilePermission444() {
	filepath += filepath + givenDevice
	if err := os.Chmod(filepath, 0444); err != nil {
		// PrintError(errors.New(err.Error() + " <> can not set 0777 for " + givenDevice))
	}
}
